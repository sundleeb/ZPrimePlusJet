#
import ROOT,sys,math,array,os
from ROOT import *
from multiprocessing import Process
from optparse import OptionParser
from operator import add
import math
import sys
import time
import array
import PlotterFunctions
from PlotterFunctions import *

def FORMAT(hists):
	hists[3].SetTitle("")
	hists[3].SetLineStyle(2)
	hists[3].SetLineColor(kBlue)
	hists[0].SetLineWidth(2)
	hists[1].SetLineWidth(2)
	hists[2].SetLineWidth(2)
	hists[3].SetLineWidth(2)
	hists[3].SetStats(0)
	hists[3].GetXaxis().SetTitle("Jet Soft Drop Mass (GeV)")
	hists[3].GetYaxis().SetTitle("Events / 5 GeV")
	hists[3].GetYaxis().SetTitleOffset(1.35)
	hists[4].SetFillStyle(3001)
	hists[4].SetFillColor(kOrange)
	hists[4].SetLineColor(kOrange)
	hists[2].SetLineColor(kRed)
	hists[1].SetLineColor(kViolet)
	hists[0].SetLineColor(kGreen)
	hists[5].SetMarkerColor(1)
	hists[5].SetLineColor(1)
	hists[5].SetMarkerStyle(10)
def MakeCanvas(DIR, hists, name, which, WIND):
	FORMAT(hists)
	print "Creating CANVAS for " + name
	htot = hists[3].Clone("htot"+name)
	for i in range(0,3): htot.Add(hists[i])
	htot.SetLineStyle(1)

	M = FindAndSetMax(htot, hists[5])
	Errors = GetErrorBand(htot)


	L = TLegend(0.6,0.5,0.89,0.89)
	L.SetLineColor(0)
	L.SetFillColor(0)
	L.AddEntry(hists[5], "data", "PL")
	L.AddEntry(hists[0], "W + #gamma", "L")
	L.AddEntry(hists[1], "Z + #gamma", "L")
	L.AddEntry(hists[2], "SM t#bar{t}", "L")
	L.AddEntry(hists[3], "#gamma + Jets and QCD", "L")
	L.AddEntry(htot, "Total Background", "L")
	L.AddEntry(hists[4], "Z'_{30 GeV} + #gamma", "F")


	C = TCanvas("C"+name, "", 750, 600)
	p12 = TPad("pad1"+name, "The pad 80% of the height",0,0.15,1,1)
	p22 = TPad("pad2"+name, "The pad 20% of the height",0,0,1.0,0.15)
	p12.Draw()
	p22.Draw()
	p12.cd()
	if WIND == 1:
		htot.GetXaxis().SetRangeUser(55., 115.)
	if WIND == 2:
		htot.GetYaxis().SetRangeUser(0.3, M*3.5)
		p12.SetLogy()
	htot.Draw("hist")
	hists[4].Draw("histsame")
	hists[3].Draw("histsame")
	hists[2].Draw("histsame")
	hists[1].Draw("histsame")
	hists[0].Draw("histsame")
	for e in Errors: e.Draw("same")
	hists[5].Draw("e0same")
	L.Draw("same")

	p22.cd()
	p22.SetGrid()


	iSig = hists[4].Clone("isig"+name)
	iSig.Add(htot)
	for i in range(iSig.GetNbinsX()):
		s = iSig.GetBinContent(i+1)
		h = htot.GetBinContent(i+1)
		if h > 0.0001 and s > 0.0001:
			iSig.SetBinContent(i+1, s/h)
		else:
			iSig.SetBinContent(i+1, 1)

	iRatio = hists[5].Clone("iR"+name);
	iRatio.SetTitle(";;Data/Prediction")	
	iRatio.Divide(htot)
	iRatio.SetMaximum(1.5);
	iRatio.SetMinimum(1.5);
	iRatio.GetYaxis().SetTitleSize(0.13);
	iRatio.GetYaxis().SetNdivisions(6);
	iRatio.GetYaxis().SetLabelSize(0.12);
	iRatio.GetYaxis().SetTitleOffset(0.33);
	iRatio.GetXaxis().SetTitleSize(0.12);
	iRatio.GetXaxis().SetLabelSize(0.12);
	iRatio.GetXaxis().SetTitleOffset(0.9);
	if WIND == 1:
		iRatio.GetXaxis().SetRangeUser(55.,115.)
	iRatio.GetYaxis().SetRangeUser(0.51,1.49);
	iOneWithErrors = htot.Clone("one"+name)
	for i in range(iOneWithErrors.GetNbinsX()): 
		if htot.GetBinContent(i+1) > 0: 
			iOneWithErrors.SetBinError( i+1, htot.GetBinError(i+1)/htot.GetBinContent(i+1) );
			iOneWithErrors.SetBinContent(i+1,1)
		else: 
			iOneWithErrors.SetBinError( i+1, 1);
			iOneWithErrors.SetBinContent(i+1,1)
		
	iOneWithErrors.SetFillStyle(3144);
	iOneWithErrors.SetFillColor(25);
	iOneWithErrors.SetMarkerSize(0);
	iOneWithErrors.SetLineWidth(0);

	iSig.SetFillStyle(0)
	iSig.SetLineWidth(2)
	iRatio.Draw("e0");
	if which != "prefit":
		iOneWithErrors.Draw("e2 sames");
	iSig.Draw("histsame")
	iRatio.Draw("same e0");

	if WIND == 0: Ext = ""
	if WIND == 1: Ext = "_WmassW"
	if WIND == 2: Ext = "_log"
	C.Print(DIR+"/"+name+Ext+".png")
	C.Print(DIR+"/"+name+Ext+".root")
	del htot; del p12; del p22; del C; del iOneWithErrors; del iRatio;
def GetErrorBand(H):
	E = []
	for i in range(1,H.GetNbinsX()+1):
		blX = H.GetBinLowEdge(i)
		blY = H.GetBinContent(i) - H.GetBinError(i)
		trX = H.GetBinWidth(i) + blX
		trY = H.GetBinContent(i) + H.GetBinError(i)
		tBox = TBox(blX,blY,trX,trY)
		tBox.SetFillColor(25)
		tBox.SetFillStyle(3144)
		E.append(tBox)
	return E

class CombineOutputPlotter:
	def __init__(self, Folder):
		print " --- --- --- --- --- --- --- --- --- --- --- "
		self.F = Folder
		self.ML = TFile(Folder+"/MLF.root")
		self.B = TFile(Folder+"/base.root")
		self.rB = TFile(Folder+"/ralphabase.root")
		FolderPartsA = Folder.split("--")
		FolderPartsB = FolderPartsA[0].split("_p")
		PathName = FolderPartsB[0].replace("OUTPUT_", "")
		self.ORIGINALS = TFile("PreProc/DATASETS/"+PathName+".root")
		self.nptbins = self.ORIGINALS.Get("data_obs_pass").GetYaxis().GetNbins()
		print "      # pT bins: " + str(self.nptbins)
		self.ML_B = RooFitResult(self.ML.Get("fit_b"))
		self.ML_S = RooFitResult(self.ML.Get("fit_s"))
		self.shapes = ['wqq','zqq','tqq','qcd','zqq30']
		print "\n\n\n"
	def MakeNuisPFPlot(self):
		POSTFITVALS = {}
		FitParList = []
		NuisParList = ["lumi", "smear", "scale", "trigger", "qcdeff"]
		for r in range(5):
			for p in range(5):
				FitParList.append("p"+str(r)+"r"+str(p))
		print " ======= FIT PARS"
		print FitParList
		for p in FitParList:
			if self.ML_B.floatParsFinal().find(p):
				V = self.ML_B.floatParsFinal().find(p).getVal()
				E = self.ML_B.floatParsFinal().find(p).getError()
				print " --------"
				print p, " = ", V, "+/-", E
				POSTFITVALS [p] = V
				POSTFITVALS [p+"_err"] = E
		print " ======= NUIS PARS"
		print NuisParList
		for p in NuisParList:
			if self.ML_B.floatParsFinal().find(p):
				V = self.ML_B.floatParsFinal().find(p).getVal()
				E = self.ML_B.floatParsFinal().find(p).getError()
				print p, "=", V, "+/-", E 
				POSTFITVALS [p] = V
				POSTFITVALS [p+"_err"] = E
		OutPutPARS = open(self.F+"/PostFitPars.py", "w") 
		OutPutPARS.write("### postfit nuissance and parameter values ###\n\n\n\n\n\n")
		OutPutPARS.write("POSTFITVALS = " + str(POSTFITVALS))
	def MakePrefitPlots(self):
		print "Creating plots!"
		passHists = []
		failHists = []
		for i in range(self.nptbins): 
			print " -- -- -- -- -- -- -- -- -- "
			(tF, tP) = self.plotCategory(i+1, "prefit")
			passHists.append(tP)
			failHists.append(tF)
		for i in range(1,self.nptbins):
			for j in range(len(passHists[0])):
				passHists[0][j].Add(passHists[i][j])
				failHists[0][j].Add(failHists[i][j])
		MakeCanvas(self.F, failHists[0], "prefit_fail_ALL", "prefit", 0)
		MakeCanvas(self.F, passHists[0], "prefit_pass_ALL", "prefit", 0)
		MakeCanvas(self.F, failHists[0], "prefit_fail_ALL", "prefit", 1)
		MakeCanvas(self.F, passHists[0], "prefit_pass_ALL", "prefit", 1)
		MakeCanvas(self.F, failHists[0], "prefit_fail_ALL", "prefit", 2)
		MakeCanvas(self.F, passHists[0], "prefit_pass_ALL", "prefit", 2)
	def MakeBOnlyPlots(self):
		print "Creating plots!"
		passHists = []
		failHists = []
		for i in range(self.nptbins): 
			print " -- -- -- -- -- -- -- -- -- "
			(tF, tP) = self.plotCategory(i+1, "fit_b")
			passHists.append(tP)
			failHists.append(tF)
		for i in range(1,self.nptbins):
			for j in range(len(passHists[0])):
				passHists[0][j].Add(passHists[i][j])
				failHists[0][j].Add(failHists[i][j])
		MakeCanvas(self.F, failHists[0], "fit_b_fail_ALL", "fit_b", 0)
		MakeCanvas(self.F, passHists[0], "fit_b_pass_ALL", "fit_b", 0)
		MakeCanvas(self.F, failHists[0], "fit_b_fail_ALL", "fit_b", 1)
		MakeCanvas(self.F, passHists[0], "fit_b_pass_ALL", "fit_b", 1)
		MakeCanvas(self.F, failHists[0], "fit_b_fail_ALL", "fit_b", 2)
		MakeCanvas(self.F, passHists[0], "fit_b_pass_ALL", "fit_b", 2)
	def MakeSPBPlots(self):
		print "Creating plots!"
		passHists = []
		failHists = []
		for i in range(self.nptbins): 
			print " -- -- -- -- -- -- -- -- -- "
			(tF, tP) = self.plotCategory(i+1, "fit_s")
			passHists.append(tP)
			failHists.append(tF)
		for i in range(1,self.nptbins):
			for j in range(len(passHists[0])):
				passHists[0][j].Add(passHists[i][j])
				failHists[0][j].Add(failHists[i][j])
		MakeCanvas(self.F, failHists[0], "fit_s_fail_ALL", "fit_s", 0)
		MakeCanvas(self.F, passHists[0], "fit_s_pass_ALL", "fit_s", 0)
		MakeCanvas(self.F, failHists[0], "fit_s_fail_ALL", "fit_s", 1)
		MakeCanvas(self.F, passHists[0], "fit_s_pass_ALL", "fit_s",1 )
		MakeCanvas(self.F, failHists[0], "fit_s_fail_ALL", "fit_s", 2)
		MakeCanvas(self.F, passHists[0], "fit_s_pass_ALL", "fit_s", 2)
	def plotCategory(self, i, W):
		cats   = ['pass','fail']
		histograms_fail = [];
		histograms_pass = [];
		for num,shapename in enumerate(self.shapes):
			print "looking in " + W + "/ch%i_fail_cat%i/%s" % (i,i,shapename)
			histograms_fail.append( self.ML.Get("shapes_"+W+"/ch%i_fail_cat%i/%s" % (i,i,shapename)))
			histograms_pass.append( self.ML.Get("shapes_"+W+"/ch%i_pass_cat%i/%s" % (i,i,shapename)))
			rags = self.ML.Get("norm_"+W)

			rrv_fail = RooRealVar(rags.find("ch%i_fail_cat%i/%s" % (i,i,shapename)))
			curnorm_fail = rrv_fail.getVal()
			rrv_pass = RooRealVar(rags.find("ch%i_pass_cat%i/%s" % (i,i,shapename)))
			curnorm_pass = rrv_pass.getVal()

			if curnorm_fail > 0.: histograms_fail[num].Scale(curnorm_fail/histograms_fail[num].Integral())
			if curnorm_pass > 0.: histograms_pass[num].Scale(curnorm_pass/histograms_pass[num].Integral())

			print str(curnorm_fail)  + " failing events"
			print str(curnorm_pass) + " passing events"
	
		histograms_fail.append(convertAsymGraph(self.ML.Get("shapes_"+W+"/ch%i_fail_cat%i/data" % (i,i)),histograms_fail[0],"shapes_"+W+"/ch%i_fail_cat%i/data"))
		histograms_pass.append(convertAsymGraph(self.ML.Get("shapes_"+W+"/ch%i_pass_cat%i/data" % (i,i)),histograms_pass[0],"shapes_"+W+"/ch%i_pass_cat%i/data"))

		print "Failing Data Events: " + str(histograms_fail[5].Integral())
		print "Passing Data Events: " + str(histograms_pass[5].Integral())

		MakeCanvas(self.F, histograms_fail, W+"_fail_cat"+str(i), W, 0)
		MakeCanvas(self.F, histograms_pass, W+"_pass_cat"+str(i), W, 0)

		return (histograms_fail, histograms_pass)
		


if __name__ == '__main__':
	print "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
	import optparse
	from optparse import OptionParser
	parser = OptionParser()
	parser.add_option('--F', '--folder', metavar='folder', type='string', dest='folder')
	(OPTIONS, args) = parser.parse_args()
	print "    " + OPTIONS.folder + "   <<< Using this file!"
	COP = CombineOutputPlotter(OPTIONS.folder)
	COP.MakeNuisPFPlot()
	COP.MakePrefitPlots()
	COP.MakeBOnlyPlots()
	COP.MakeSPBPlots()
